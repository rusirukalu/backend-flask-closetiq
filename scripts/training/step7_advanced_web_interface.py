# step7_advanced_web_interface.py - Advanced Web Interface with Visual Features

import os
import json
from datetime import datetime
from flask import Flask, render_template, request, jsonify, send_from_directory
import numpy as np
from werkzeug.utils import secure_filename
import tensorflow as tf
from PIL import Image
import base64
import io

class AdvancedFashionWebInterface:
    """Advanced Web Interface for Fashion AI System"""
    
    def __init__(self):
        self.app = Flask(__name__)
        self.app.secret_key = 'fashion_ai_secret_key_2025'
        
        # Configuration
        self.app.config['UPLOAD_FOLDER'] = 'uploads'
        self.app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max
        
        # Ensure upload directory exists
        os.makedirs(self.app.config['UPLOAD_FOLDER'], exist_ok=True)
        
        # Load all AI models and systems
        self.load_ai_systems()
        
        # Setup routes
        self.setup_routes()
        
        # Analytics data
        self.analytics_data = {
            'total_classifications': 0,
            'wardrobe_items': 0,
            'outfit_recommendations': 0,
            'style_queries': 0
        }
    
    def load_ai_systems(self):
        """Load all AI models and systems"""
        print("üîß LOADING AI SYSTEMS FOR WEB INTERFACE")
        print("=" * 60)
        
        try:
            # Load main classification model
            self.classification_model = tf.keras.models.load_model('final_enhanced_model.keras')
            print("‚úÖ Classification model loaded")
            
            # Load similarity system
            try:
                with open('fashion_similarity_database.json', 'r') as f:
                    self.similarity_data = json.load(f)
                print("‚úÖ Similarity system loaded")
            except:
                print("‚ö†Ô∏è Similarity system not found")
                self.similarity_data = None
            
            # Load knowledge graph
            try:
                with open('knowledge_graph_config.json', 'r') as f:
                    self.knowledge_graph_config = json.load(f)
                print("‚úÖ Knowledge graph loaded")
            except:
                print("‚ö†Ô∏è Knowledge graph not found")
                self.knowledge_graph_config = None
            
            # Categories
            self.categories = [
                'shirts_blouses', 'tshirts_tops', 'dresses', 'pants_jeans',
                'shorts', 'skirts', 'jackets_coats', 'sweaters', 
                'shoes_sneakers', 'shoes_formal', 'bags_accessories'
            ]
            
        except Exception as e:
            print(f"‚ùå Error loading AI systems: {e}")
    
    def setup_routes(self):
        """Setup all web routes"""
        
        @self.app.route('/')
        def index():
            """Main dashboard page"""
            return render_template('advanced_dashboard.html', 
                                 analytics=self.analytics_data)
        
        @self.app.route('/classify')
        def classify_page():
            """Classification page"""
            return render_template('classification.html')
        
        @self.app.route('/wardrobe')
        def wardrobe_page():
            """Wardrobe management page"""
            return render_template('wardrobe.html')
        
        @self.app.route('/recommendations')
        def recommendations_page():
            """Outfit recommendations page"""
            return render_template('recommendations.html')
        
        @self.app.route('/analytics')
        def analytics_page():
            """Analytics dashboard page"""
            return render_template('analytics.html')
        
        @self.app.route('/style-assistant')
        def style_assistant_page():
            """AI Style Assistant page"""
            return render_template('style_assistant.html')
        
        # API Endpoints
        @self.app.route('/api/classify', methods=['POST'])
        def api_classify():
            """Classify uploaded image"""
            try:
                if 'file' not in request.files:
                    return jsonify({'error': 'No file uploaded'}), 400
                
                file = request.files['file']
                if file.filename == '':
                    return jsonify({'error': 'No file selected'}), 400
                
                if file and self.allowed_file(file.filename):
                    # Save file
                    filename = secure_filename(file.filename)
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_')
                    filename = timestamp + filename
                    filepath = os.path.join(self.app.config['UPLOAD_FOLDER'], filename)
                    file.save(filepath)
                    
                    # Classify image
                    result = self.classify_image(filepath)
                    result['filename'] = filename
                    result['filepath'] = filepath
                    
                    # Update analytics
                    self.analytics_data['total_classifications'] += 1
                    
                    return jsonify(result)
                else:
                    return jsonify({'error': 'Invalid file type'}), 400
                    
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/wardrobe', methods=['GET', 'POST'])
        def api_wardrobe():
            """Manage wardrobe items"""
            if request.method == 'POST':
                # Add item to wardrobe
                data = request.json
                result = self.add_to_wardrobe(data)
                self.analytics_data['wardrobe_items'] += 1
                return jsonify(result)
            else:
                # Get wardrobe items
                items = self.get_wardrobe_items()
                return jsonify({'items': items, 'count': len(items)})
        
        @self.app.route('/api/recommend-outfits', methods=['POST'])
        def api_recommend_outfits():
            """Get outfit recommendations"""
            try:
                data = request.json
                occasion = data.get('occasion', 'casual')
                season = data.get('season', 'spring')
                style_preference = data.get('style', 'classic')
                
                recommendations = self.generate_outfit_recommendations(
                    occasion, season, style_preference
                )
                
                self.analytics_data['outfit_recommendations'] += 1
                return jsonify(recommendations)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/style-compatibility', methods=['POST'])
        def api_style_compatibility():
            """Check style compatibility between items"""
            try:
                data = request.json
                item1 = data.get('item1')
                item2 = data.get('item2')
                context = data.get('context', 'general')
                
                compatibility = self.check_style_compatibility(item1, item2, context)
                
                self.analytics_data['style_queries'] += 1
                return jsonify(compatibility)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/analytics-data')
        def api_analytics_data():
            """Get analytics data"""
            # Generate comprehensive analytics
            analytics = self.generate_analytics_data()
            return jsonify(analytics)
        
        @self.app.route('/api/style-query', methods=['POST'])
        def api_style_query():
            """Answer style-related questions"""
            try:
                data = request.json
                question = data.get('question', '')
                
                answer = self.answer_style_question(question)
                return jsonify(answer)
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/uploads/<filename>')
        def uploaded_file(filename):
            """Serve uploaded files"""
            return send_from_directory(self.app.config['UPLOAD_FOLDER'], filename)
    
    def allowed_file(self, filename):
        """Check if file type is allowed"""
        ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp'}
        return '.' in filename and \
               filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS
    
    def classify_image(self, filepath):
        """Classify a fashion image"""
        try:
            # Load and preprocess image
            img = Image.open(filepath).convert('RGB')
            img = img.resize((224, 224))
            img_array = np.array(img) / 255.0
            img_array = np.expand_dims(img_array, axis=0)
            
            # Predict
            predictions = self.classification_model.predict(img_array)
            predicted_idx = np.argmax(predictions[0])
            confidence = float(predictions[0][predicted_idx])
            
            # Get all predictions with confidence scores
            all_predictions = []
            for i, score in enumerate(predictions[0]):
                all_predictions.append({
                    'category': self.categories[i],
                    'confidence': float(score),
                    'percentage': float(score * 100)
                })
            
            # Sort by confidence
            all_predictions.sort(key=lambda x: x['confidence'], reverse=True)
            
            return {
                'success': True,
                'predicted_category': self.categories[predicted_idx],
                'confidence': confidence,
                'confidence_percentage': confidence * 100,
                'all_predictions': all_predictions,
                'quality_score': self.calculate_quality_score(predictions[0]),
                'recommendation': self.get_classification_recommendation(confidence)
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def calculate_quality_score(self, predictions):
        """Calculate image quality score based on prediction confidence"""
        max_confidence = np.max(predictions)
        second_max = np.partition(predictions, -2)[-2]
        
        # Quality based on confidence gap
        confidence_gap = max_confidence - second_max
        
        if confidence_gap > 0.5:
            return {'score': 'Excellent', 'value': 95}
        elif confidence_gap > 0.3:
            return {'score': 'Good', 'value': 80}
        elif confidence_gap > 0.1:
            return {'score': 'Fair', 'value': 65}
        else:
            return {'score': 'Poor', 'value': 40}
    
    def get_classification_recommendation(self, confidence):
        """Get recommendation based on classification confidence"""
        if confidence > 0.9:
            return "Excellent classification! The AI is very confident about this item."
        elif confidence > 0.7:
            return "Good classification. The AI is reasonably confident."
        elif confidence > 0.5:
            return "Moderate confidence. Consider retaking the photo with better lighting."
        else:
            return "Low confidence. Try a clearer photo with better lighting and positioning."
    
    def add_to_wardrobe(self, data):
        """Add item to wardrobe"""
        try:
            # In a real app, this would save to database
            wardrobe_file = 'wardrobe_items.json'
            
            # Load existing wardrobe
            if os.path.exists(wardrobe_file):
                with open(wardrobe_file, 'r') as f:
                    wardrobe = json.load(f)
            else:
                wardrobe = []
            
            # Add new item
            item = {
                'id': len(wardrobe) + 1,
                'filename': data.get('filename'),
                'category': data.get('category'),
                'confidence': data.get('confidence'),
                'date_added': datetime.now().isoformat(),
                'tags': data.get('tags', []),
                'notes': data.get('notes', '')
            }
            
            wardrobe.append(item)
            
            # Save wardrobe
            with open(wardrobe_file, 'w') as f:
                json.dump(wardrobe, f, indent=2)
            
            return {'success': True, 'item_id': item['id']}
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def get_wardrobe_items(self):
        """Get all wardrobe items"""
        try:
            wardrobe_file = 'wardrobe_items.json'
            
            if os.path.exists(wardrobe_file):
                with open(wardrobe_file, 'r') as f:
                    return json.load(f)
            else:
                return []
                
        except Exception as e:
            return []
    
    def generate_outfit_recommendations(self, occasion, season, style_preference):
        """Generate outfit recommendations"""
        try:
            # Get wardrobe items
            wardrobe_items = self.get_wardrobe_items()
            
            if not wardrobe_items:
                return {
                    'success': False,
                    'message': 'No items in wardrobe to create recommendations'
                }
            
            # Group items by category
            categorized_items = {}
            for item in wardrobe_items:
                category = item['category']
                if category not in categorized_items:
                    categorized_items[category] = []
                categorized_items[category].append(item)
            
            # Generate outfit combinations
            outfits = self.create_outfit_combinations(
                categorized_items, occasion, season, style_preference
            )
            
            return {
                'success': True,
                'outfits': outfits,
                'total_combinations': len(outfits),
                'occasion': occasion,
                'season': season,
                'style': style_preference
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def create_outfit_combinations(self, categorized_items, occasion, season, style):
        """Create outfit combinations based on wardrobe items"""
        outfits = []
        
        # Define outfit templates
        outfit_templates = {
            'work': {'required': ['tops', 'bottoms', 'shoes'], 'optional': ['outerwear']},
            'casual': {'required': ['tops', 'bottoms', 'shoes'], 'optional': ['accessories']},
            'formal': {'required': ['dress_or_suit', 'shoes'], 'optional': ['accessories']},
            'party': {'required': ['dress_or_top', 'shoes'], 'optional': ['accessories']}
        }
        
        template = outfit_templates.get(occasion, outfit_templates['casual'])
        
        # Map categories to template requirements
        category_mapping = {
            'shirts_blouses': 'tops',
            'tshirts_tops': 'tops',
            'sweaters': 'tops',
            'dresses': 'dress_or_suit',
            'pants_jeans': 'bottoms',
            'shorts': 'bottoms',
            'skirts': 'bottoms',
            'shoes_sneakers': 'shoes',
            'shoes_formal': 'shoes',
            'jackets_coats': 'outerwear',
            'bags_accessories': 'accessories'
        }
        
        # Get items for each template category
        template_items = {}
        for category, items in categorized_items.items():
            template_cat = category_mapping.get(category)
            if template_cat:
                if template_cat not in template_items:
                    template_items[template_cat] = []
                template_items[template_cat].extend(items)
        
        # Create combinations
        if 'tops' in template_items and 'bottoms' in template_items and 'shoes' in template_items:
            for top in template_items['tops'][:3]:  # Limit for performance
                for bottom in template_items['bottoms'][:3]:
                    for shoe in template_items['shoes'][:2]:
                        outfit = {
                            'items': [top, bottom, shoe],
                            'compatibility_score': self.calculate_outfit_compatibility(
                                [top, bottom, shoe], occasion, season
                            ),
                            'style_match': self.calculate_style_match([top, bottom, shoe], style),
                            'occasion_appropriate': self.check_occasion_appropriateness(
                                [top, bottom, shoe], occasion
                            )
                        }
                        
                        # Add optional items
                        if 'outerwear' in template_items and len(template_items['outerwear']) > 0:
                            outfit['items'].append(template_items['outerwear'][0])
                        
                        outfits.append(outfit)
        
        # Sort by overall score
        for outfit in outfits:
            outfit['overall_score'] = (
                outfit['compatibility_score'] * 0.4 +
                outfit['style_match'] * 0.3 +
                outfit['occasion_appropriate'] * 0.3
            )
        
        outfits.sort(key=lambda x: x['overall_score'], reverse=True)
        
        return outfits[:5]  # Return top 5 outfits
    
    def calculate_outfit_compatibility(self, items, occasion, season):
        """Calculate compatibility score for outfit items"""
        # Simplified compatibility calculation
        # In a real implementation, this would use the knowledge graph
        
        if len(items) < 2:
            return 0.5
        
        # Base compatibility
        base_score = 0.7
        
        # Occasion bonus
        if occasion == 'work':
            work_items = ['shirts_blouses', 'pants_jeans', 'shoes_formal']
            if any(item['category'] in work_items for item in items):
                base_score += 0.1
        
        # Season bonus (simplified)
        if season in ['fall', 'winter']:
            if any(item['category'] in ['jackets_coats', 'sweaters'] for item in items):
                base_score += 0.1
        
        return min(base_score, 1.0)
    
    def calculate_style_match(self, items, style_preference):
        """Calculate how well items match style preference"""
        # Simplified style matching
        style_scores = {
            'classic': 0.8,
            'casual': 0.7,
            'formal': 0.9,
            'trendy': 0.6
        }
        
        return style_scores.get(style_preference, 0.7)
    
    def check_occasion_appropriateness(self, items, occasion):
        """Check if items are appropriate for occasion"""
        # Simplified occasion checking
        occasion_scores = {
            'work': 0.85,
            'casual': 0.9,
            'formal': 0.8,
            'party': 0.75
        }
        
        return occasion_scores.get(occasion, 0.7)
    
    def check_style_compatibility(self, item1, item2, context):
        """Check compatibility between two items"""
        try:
            # Simplified compatibility check
            # In real implementation, would use knowledge graph
            
            # Basic compatibility rules
            compatibility_rules = {
                ('shirts_blouses', 'pants_jeans'): 0.9,
                ('tshirts_tops', 'jeans'): 0.85,
                ('dresses', 'shoes_formal'): 0.9,
                ('sweaters', 'skirts'): 0.8
            }
            
            # Check direct compatibility
            score = compatibility_rules.get((item1, item2), 0.7)
            score = compatibility_rules.get((item2, item1), score)
            
            return {
                'compatible': score > 0.6,
                'score': score,
                'reasoning': f"{item1} and {item2} work well together",
                'context_appropriate': context in ['work', 'casual', 'formal']
            }
            
        except Exception as e:
            return {
                'compatible': False,
                'score': 0.0,
                'reasoning': f"Error checking compatibility: {str(e)}",
                'context_appropriate': False
            }
    
    def generate_analytics_data(self):
        """Generate comprehensive analytics data"""
        try:
            # Get wardrobe items
            wardrobe_items = self.get_wardrobe_items()
            
            # Category distribution
            category_counts = {}
            for item in wardrobe_items:
                category = item['category']
                category_counts[category] = category_counts.get(category, 0) + 1
            
            # Confidence distribution
            confidence_ranges = {'High (>80%)': 0, 'Medium (60-80%)': 0, 'Low (<60%)': 0}
            for item in wardrobe_items:
                confidence = item.get('confidence', 0)
                if confidence > 0.8:
                    confidence_ranges['High (>80%)'] += 1
                elif confidence > 0.6:
                    confidence_ranges['Medium (60-80%)'] += 1
                else:
                    confidence_ranges['Low (<60%)'] += 1
            
            # Usage statistics
            usage_stats = self.analytics_data.copy()
            usage_stats['wardrobe_items'] = len(wardrobe_items)
            
            return {
                'usage_statistics': usage_stats,
                'category_distribution': category_counts,
                'confidence_distribution': confidence_ranges,
                'wardrobe_summary': {
                    'total_items': len(wardrobe_items),
                    'average_confidence': np.mean([item.get('confidence', 0) for item in wardrobe_items]) if wardrobe_items else 0,
                    'most_common_category': max(category_counts, key=category_counts.get) if category_counts else 'None'
                }
            }
            
        except Exception as e:
            return {
                'error': str(e),
                'usage_statistics': self.analytics_data,
                'category_distribution': {},
                'confidence_distribution': {},
                'wardrobe_summary': {}
            }
    
    def answer_style_question(self, question):
        """Answer style-related questions using knowledge base"""
        try:
            question_lower = question.lower()
            
            # Simple question matching
            if 'color' in question_lower and 'match' in question_lower:
                return {
                    'answer': 'For color matching, try complementary colors like blue and orange, or stick to neutral combinations like black and white.',
                    'confidence': 0.8,
                    'source': 'Color Theory Knowledge Base'
                }
            elif 'work' in question_lower or 'office' in question_lower:
                return {
                    'answer': 'For work attire, focus on classic pieces like blazers, dress pants, button-down shirts, and closed-toe shoes. Stick to neutral colors.',
                    'confidence': 0.9,
                    'source': 'Professional Dress Guidelines'
                }
            elif 'casual' in question_lower:
                return {
                    'answer': 'For casual wear, jeans, t-shirts, sneakers, and comfortable sweaters work well. Feel free to experiment with colors and patterns.',
                    'confidence': 0.85,
                    'source': 'Casual Style Guidelines'
                }
            else:
                return {
                    'answer': 'I can help with questions about color matching, work attire, casual styling, and outfit coordination. Please ask a more specific question!',
                    'confidence': 0.7,
                    'source': 'General Fashion Knowledge'
                }
                
        except Exception as e:
            return {
                'answer': f'Sorry, I encountered an error: {str(e)}',
                'confidence': 0.0,
                'source': 'Error Handler'
            }
    
    def create_templates(self):
        """Create HTML templates for the web interface"""
        
        # Create templates directory
        os.makedirs('templates', exist_ok=True)
        
        # Base template
        base_template = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Fashion AI System{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .navbar-brand { font-weight: bold; }
        .card { border-radius: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        .btn-primary { background: linear-gradient(45deg, #007bff, #0056b3); border: none; }
        .confidence-bar { height: 20px; background: #e9ecef; border-radius: 10px; overflow: hidden; }
        .confidence-fill { height: 100%; transition: width 0.5s ease; }
        .high-confidence { background: linear-gradient(90deg, #28a745, #20c997); }
        .medium-confidence { background: linear-gradient(90deg, #ffc107, #fd7e14); }
        .low-confidence { background: linear-gradient(90deg, #dc3545, #e74c3c); }
        .loading { display: none; }
        .fade-in { animation: fadeIn 0.5s ease-in; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/"><i class="fas fa-tshirt me-2"></i>Fashion AI</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item"><a class="nav-link" href="/"><i class="fas fa-home me-1"></i>Dashboard</a></li>
                    <li class="nav-item"><a class="nav-link" href="/classify"><i class="fas fa-camera me-1"></i>Classify</a></li>
                    <li class="nav-item"><a class="nav-link" href="/wardrobe"><i class="fas fa-closet me-1"></i>Wardrobe</a></li>
                    <li class="nav-item"><a class="nav-link" href="/recommendations"><i class="fas fa-magic me-1"></i>Outfits</a></li>
                    <li class="nav-item"><a class="nav-link" href="/style-assistant"><i class="fas fa-robot me-1"></i>Style Assistant</a></li>
                    <li class="nav-item"><a class="nav-link" href="/analytics"><i class="fas fa-chart-bar me-1"></i>Analytics</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <main class="container mt-4">
        {% block content %}{% endblock %}
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block scripts %}{% endblock %}
</body>
</html>'''
        
        # Dashboard template
        dashboard_template = '''{% extends "base.html" %}

{% block title %}Fashion AI Dashboard{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4"><i class="fas fa-tshirt me-2"></i>Fashion AI Dashboard</h1>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-3 mb-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-camera fa-2x text-primary mb-2"></i>
                <h5 class="card-title">Classifications</h5>
                <h3 class="text-primary">{{ analytics.total_classifications }}</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-closet fa-2x text-success mb-2"></i>
                <h5 class="card-title">Wardrobe Items</h5>
                <h3 class="text-success">{{ analytics.wardrobe_items }}</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-magic fa-2x text-warning mb-2"></i>
                <h5 class="card-title">Outfit Ideas</h5>
                <h3 class="text-warning">{{ analytics.outfit_recommendations }}</h3>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card text-center">
            <div class="card-body">
                <i class="fas fa-robot fa-2x text-info mb-2"></i>
                <h5 class="card-title">Style Queries</h5>
                <h3 class="text-info">{{ analytics.style_queries }}</h3>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-camera me-2"></i>Quick Classify</h5>
            </div>
            <div class="card-body">
                <p>Upload an image to classify fashion items using AI</p>
                <a href="/classify" class="btn btn-primary">
                    <i class="fas fa-upload me-1"></i>Start Classifying
                </a>
            </div>
        </div>
    </div>
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-magic me-2"></i>Outfit Recommendations</h5>
            </div>
            <div class="card-body">
                <p>Get AI-powered outfit suggestions based on your wardrobe</p>
                <a href="/recommendations" class="btn btn-primary">
                    <i class="fas fa-sparkles me-1"></i>Get Recommendations
                </a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-closet me-2"></i>Manage Wardrobe</h5>
            </div>
            <div class="card-body">
                <p>View and organize your digital wardrobe collection</p>
                <a href="/wardrobe" class="btn btn-primary">
                    <i class="fas fa-eye me-1"></i>View Wardrobe
                </a>
            </div>
        </div>
    </div>
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-robot me-2"></i>Style Assistant</h5>
            </div>
            <div class="card-body">
                <p>Ask questions about fashion, styling, and outfit coordination</p>
                <a href="/style-assistant" class="btn btn-primary">
                    <i class="fas fa-comments me-1"></i>Ask Assistant
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}'''
        
        # Save templates
        with open('templates/base.html', 'w') as f:
            f.write(base_template)
        
        with open('templates/advanced_dashboard.html', 'w') as f:
            f.write(dashboard_template)
        
        # Create other template files (simplified versions)
        templates = {
            'classification.html': self.create_classification_template(),
            'wardrobe.html': self.create_wardrobe_template(),
            'recommendations.html': self.create_recommendations_template(),
            'analytics.html': self.create_analytics_template(),
            'style_assistant.html': self.create_style_assistant_template()
        }
        
        for filename, content in templates.items():
            with open(f'templates/{filename}', 'w') as f:
                f.write(content)
        
        print("‚úÖ HTML templates created")
    
    def create_classification_template(self):
        """Create classification page template"""
        return '''{% extends "base.html" %}

{% block title %}Fashion Classification{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-camera me-2"></i>Fashion Item Classification</h1>
        <p class="lead">Upload an image to identify fashion items using AI</p>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Upload Image</h5>
            </div>
            <div class="card-body">
                <form id="classifyForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <input type="file" class="form-control" id="imageFile" accept="image/*" required>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-search me-1"></i>Classify Image
                    </button>
                </form>
                
                <div id="loading" class="loading text-center mt-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Analyzing image...</p>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Classification Results</h5>
            </div>
            <div class="card-body">
                <div id="results" style="display: none;">
                    <div id="imagePreview"></div>
                    <div id="predictions"></div>
                    <div id="qualityScore"></div>
                    <div id="recommendation"></div>
                    <button id="addToWardrobe" class="btn btn-success mt-3" style="display: none;">
                        <i class="fas fa-plus me-1"></i>Add to Wardrobe
                    </button>
                </div>
                <div id="noResults" class="text-muted">
                    <i class="fas fa-info-circle me-2"></i>Upload an image to see classification results
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.getElementById('classifyForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const fileInput = document.getElementById('imageFile');
    const file = fileInput.files[0];
    
    if (!file) {
        alert('Please select an image file');
        return;
    }
    
    // Show loading
    document.getElementById('loading').style.display = 'block';
    document.getElementById('results').style.display = 'none';
    document.getElementById('noResults').style.display = 'none';
    
    // Create form data
    const formData = new FormData();
    formData.append('file', file);
    
    try {
        const response = await fetch('/api/classify', {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        // Hide loading
        document.getElementById('loading').style.display = 'none';
        
        if (result.success) {
            displayResults(result);
        } else {
            alert('Error: ' + result.error);
        }
    } catch (error) {
        document.getElementById('loading').style.display = 'none';
        alert('Error: ' + error.message);
    }
});

function displayResults(result) {
    // Show image preview
    const file = document.getElementById('imageFile').files[0];
    const reader = new FileReader();
    reader.onload = function(e) {
        document.getElementById('imagePreview').innerHTML = 
            '<img src="' + e.target.result + '" class="img-fluid rounded mb-3" style="max-height: 200px;">';
    };
    reader.readAsDataURL(file);
    
    // Show predictions
    let predictionsHtml = '<h6>Top Predictions:</h6>';
    result.all_predictions.slice(0, 3).forEach(pred => {
        const confidenceClass = pred.confidence > 0.8 ? 'high-confidence' : 
                               pred.confidence > 0.6 ? 'medium-confidence' : 'low-confidence';
        
        predictionsHtml += `
            <div class="mb-2">
                <div class="d-flex justify-content-between">
                    <span>${pred.category.replace('_', ' ')}</span>
                    <span>${pred.percentage.toFixed(1)}%</span>
                </div>
                <div class="confidence-bar">
                    <div class="confidence-fill ${confidenceClass}" style="width: ${pred.percentage}%"></div>
                </div>
            </div>
        `;
    });
    
    document.getElementById('predictions').innerHTML = predictionsHtml;
    
    // Show quality score
    document.getElementById('qualityScore').innerHTML = 
        '<h6>Quality Score: <span class="badge bg-primary">' + result.quality_score.score + '</span></h6>';
    
    // Show recommendation
    document.getElementById('recommendation').innerHTML = 
        '<div class="alert alert-info"><i class="fas fa-lightbulb me-2"></i>' + result.recommendation + '</div>';
    
    // Show results
    document.getElementById('results').style.display = 'block';
    document.getElementById('addToWardrobe').style.display = 'block';
    
    // Store result for adding to wardrobe
    window.currentResult = result;
}

document.getElementById('addToWardrobe').addEventListener('click', async function() {
    if (!window.currentResult) return;
    
    const data = {
        filename: window.currentResult.filename,
        category: window.currentResult.predicted_category,
        confidence: window.currentResult.confidence,
        tags: [],
        notes: ''
    };
    
    try {
        const response = await fetch('/api/wardrobe', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert('Item added to wardrobe successfully!');
            this.style.display = 'none';
        } else {
            alert('Error adding to wardrobe: ' + result.error);
        }
    } catch (error) {
        alert('Error: ' + error.message);
    }
});
</script>
{% endblock %}'''
    
    def create_wardrobe_template(self):
        """Create wardrobe page template"""
        return '''{% extends "base.html" %}

{% block title %}My Wardrobe{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-closet me-2"></i>My Digital Wardrobe</h1>
        <p class="lead">Manage and organize your fashion collection</p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <h5>Wardrobe Items</h5>
                <button class="btn btn-sm btn-primary" onclick="loadWardrobe()">
                    <i class="fas fa-refresh me-1"></i>Refresh
                </button>
            </div>
            <div class="card-body">
                <div id="wardrobeItems" class="row">
                    <div class="col-12 text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Loading wardrobe items...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
async function loadWardrobe() {
    try {
        const response = await fetch('/api/wardrobe');
        const data = await response.json();
        
        const container = document.getElementById('wardrobeItems');
        
        if (data.items && data.items.length > 0) {
            let html = '';
            data.items.forEach(item => {
                const confidenceClass = item.confidence > 0.8 ? 'success' : 
                                       item.confidence > 0.6 ? 'warning' : 'danger';
                
                html += `
                    <div class="col-md-4 col-lg-3 mb-3">
                        <div class="card">
                            <img src="/uploads/${item.filename}" class="card-img-top" style="height: 200px; object-fit: cover;">
                            <div class="card-body">
                                <h6 class="card-title">${item.category.replace('_', ' ')}</h6>
                                <p class="card-text">
                                    <span class="badge bg-${confidenceClass}">${(item.confidence * 100).toFixed(1)}% confidence</span>
                                </p>
                                <small class="text-muted">Added: ${new Date(item.date_added).toLocaleDateString()}</small>
                            </div>
                        </div>
                    </div>
                `;
            });
            container.innerHTML = html;
        } else {
            container.innerHTML = `
                <div class="col-12 text-center">
                    <i class="fas fa-closet fa-3x text-muted mb-3"></i>
                    <h5>No items in wardrobe</h5>
                    <p>Start by <a href="/classify">classifying some images</a></p>
                </div>
            `;
        }
    } catch (error) {
        document.getElementById('wardrobeItems').innerHTML = 
            '<div class="col-12"><div class="alert alert-danger">Error loading wardrobe: ' + error.message + '</div></div>';
    }
}

// Load wardrobe on page load
document.addEventListener('DOMContentLoaded', loadWardrobe);
</script>
{% endblock %}'''
    
    def create_recommendations_template(self):
        """Create recommendations page template"""
        return '''{% extends "base.html" %}

{% block title %}Outfit Recommendations{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-magic me-2"></i>AI Outfit Recommendations</h1>
        <p class="lead">Get personalized outfit suggestions based on your wardrobe</p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5>Preferences</h5>
            </div>
            <div class="card-body">
                <form id="recommendationForm">
                    <div class="mb-3">
                        <label class="form-label">Occasion</label>
                        <select class="form-select" id="occasion">
                            <option value="casual">Casual</option>
                            <option value="work">Work</option>
                            <option value="formal">Formal</option>
                            <option value="party">Party</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Season</label>
                        <select class="form-select" id="season">
                            <option value="spring">Spring</option>
                            <option value="summer">Summer</option>
                            <option value="fall">Fall</option>
                            <option value="winter">Winter</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Style</label>
                        <select class="form-select" id="style">
                            <option value="classic">Classic</option>
                            <option value="casual">Casual</option>
                            <option value="formal">Formal</option>
                            <option value="trendy">Trendy</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-sparkles me-1"></i>Get Recommendations
                    </button>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5>Recommended Outfits</h5>
            </div>
            <div class="card-body">
                <div id="recommendations">
                    <div class="text-center text-muted">
                        <i class="fas fa-magic fa-3x mb-3"></i>
                        <h5>Ready for recommendations!</h5>
                        <p>Set your preferences and click "Get Recommendations"</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.getElementById('recommendationForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const data = {
        occasion: document.getElementById('occasion').value,
        season: document.getElementById('season').value,
        style: document.getElementById('style').value
    };
    
    // Show loading
    document.getElementById('recommendations').innerHTML = `
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Generating outfit recommendations...</p>
        </div>
    `;
    
    try {
        const response = await fetch('/api/recommend-outfits', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
            displayRecommendations(result);
        } else {
            document.getElementById('recommendations').innerHTML = 
                '<div class="alert alert-warning">' + result.message + '</div>';
        }
    } catch (error) {
        document.getElementById('recommendations').innerHTML = 
            '<div class="alert alert-danger">Error: ' + error.message + '</div>';
    }
});

function displayRecommendations(result) {
    let html = '';
    
    if (result.outfits && result.outfits.length > 0) {
        result.outfits.forEach((outfit, index) => {
            html += `
                <div class="card mb-3">
                    <div class="card-header">
                        <h6>Outfit ${index + 1} 
                            <span class="badge bg-primary">${(outfit.overall_score * 100).toFixed(0)}% match</span>
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            ${outfit.items.map(item => `
                                <div class="col-md-3 text-center">
                                    <img src="/uploads/${item.filename}" class="img-fluid rounded mb-2" style="max-height: 150px;">
                                    <small class="d-block">${item.category.replace('_', ' ')}</small>
                                </div>
                            `).join('')}
                        </div>
                        <div class="mt-3">
                            <small class="text-muted">
                                Compatibility: ${(outfit.compatibility_score * 100).toFixed(0)}% | 
                                Style Match: ${(outfit.style_match * 100).toFixed(0)}% | 
                                Occasion: ${(outfit.occasion_appropriate * 100).toFixed(0)}%
                            </small>
                        </div>
                    </div>
                </div>
            `;
        });
    } else {
        html = '<div class="alert alert-info">No outfit recommendations available. Add more items to your wardrobe!</div>';
    }
    
    document.getElementById('recommendations').innerHTML = html;
}
</script>
{% endblock %}'''
    
    def create_analytics_template(self):
        """Create analytics page template"""
        return '''{% extends "base.html" %}

{% block title %}Analytics Dashboard{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-chart-bar me-2"></i>Analytics Dashboard</h1>
        <p class="lead">Insights into your fashion AI system usage</p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Category Distribution</h5>
            </div>
            <div class="card-body">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Confidence Distribution</h5>
            </div>
            <div class="card-body">
                <canvas id="confidenceChart"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Usage Statistics</h5>
            </div>
            <div class="card-body">
                <canvas id="usageChart"></canvas>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
async function loadAnalytics() {
    try {
        const response = await fetch('/api/analytics-data');
        const data = await response.json();
        
        // Category Distribution Chart
        const categoryCtx = document.getElementById('categoryChart').getContext('2d');
        new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(data.category_distribution || {}),
                datasets: [{
                    data: Object.values(data.category_distribution || {}),
                    backgroundColor: [
                        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
                        '#4BC0C0', '#FF6384', '#36A2EB'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
        
        // Confidence Distribution Chart
        const confidenceCtx = document.getElementById('confidenceChart').getContext('2d');
        new Chart(confidenceCtx, {
            type: 'bar',
            data: {
                labels: Object.keys(data.confidence_distribution || {}),
                datasets: [{
                    label: 'Number of Items',
                    data: Object.values(data.confidence_distribution || {}),
                    backgroundColor: ['#28a745', '#ffc107', '#dc3545']
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        // Usage Statistics Chart
        const usageCtx = document.getElementById('usageChart').getContext('2d');
        new Chart(usageCtx, {
            type: 'line',
            data: {
                labels: Object.keys(data.usage_statistics || {}),
                datasets: [{
                    label: 'Count',
                    data: Object.values(data.usage_statistics || {}),
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    fill: true
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
    } catch (error) {
        console.error('Error loading analytics:', error);
    }
}

document.addEventListener('DOMContentLoaded', loadAnalytics);
</script>
{% endblock %}'''
    
    def create_style_assistant_template(self):
        """Create style assistant page template"""
        return '''{% extends "base.html" %}

{% block title %}AI Style Assistant{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1><i class="fas fa-robot me-2"></i>AI Style Assistant</h1>
        <p class="lead">Ask questions about fashion, styling, and outfit coordination</p>
    </div>
</div>

<div class="row">
    <div class="col-md-8 mx-auto">
        <div class="card">
            <div class="card-header">
                <h5>Fashion Q&A</h5>
            </div>
            <div class="card-body">
                <div id="chatMessages" style="height: 400px; overflow-y: auto;">
                    <div class="alert alert-info">
                        <i class="fas fa-robot me-2"></i>
                        Hi! I'm your AI Style Assistant. Ask me anything about fashion, color matching, outfit coordination, or style advice!
                    </div>
                </div>
                
                <form id="questionForm" class="mt-3">
                    <div class="input-group">
                        <input type="text" class="form-control" id="questionInput" 
                               placeholder="Ask a fashion question..." required>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </form>
                
                <div class="mt-3">
                    <small class="text-muted">
                        <strong>Try asking:</strong> "What colors go with navy blue?" or "What should I wear to work?"
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.getElementById('questionForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const questionInput = document.getElementById('questionInput');
    const question = questionInput.value.trim();
    
    if (!question) return;
    
    // Add user question to chat
    addMessage(question, 'user');
    
    // Clear input
    questionInput.value = '';
    
    // Add thinking message
    const thinkingId = addMessage('Thinking...', 'assistant', true);
    
    try {
        const response = await fetch('/api/style-query', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({question: question})
        });
        
        const result = await response.json();
        
        // Remove thinking message
        document.getElementById(thinkingId).remove();
        
        // Add assistant response
        addMessage(result.answer, 'assistant');
        
    } catch (error) {
        document.getElementById(thinkingId).remove();
        addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
    }
});

function addMessage(message, sender, isTemporary = false) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    const messageId = 'msg-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    
    messageDiv.id = messageId;
    messageDiv.className = `alert ${sender === 'user' ? 'alert-primary' : 'alert-secondary'} fade-in`;
    
    if (sender === 'user') {
        messageDiv.innerHTML = `<i class="fas fa-user me-2"></i>${message}`;
    } else {
        messageDiv.innerHTML = `<i class="fas fa-robot me-2"></i>${message}`;
    }
    
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    return messageId;
}
</script>
{% endblock %}'''
    
    def run_web_interface(self, host='localhost', port=5002, debug=True):
        """Run the web interface"""
        print("üöÄ STARTING ADVANCED FASHION AI WEB INTERFACE")
        print("=" * 70)
        
        # Create templates
        self.create_templates()
        
        print(f"‚úÖ Web interface ready!")
        print(f"üåê Access the application at: http://{host}:{port}")
        print(f"üì± Features available:")
        print(f"   ‚Ä¢ Image classification with confidence scoring")
        print(f"   ‚Ä¢ Digital wardrobe management")
        print(f"   ‚Ä¢ AI outfit recommendations")
        print(f"   ‚Ä¢ Analytics dashboard with visualizations")
        print(f"   ‚Ä¢ Interactive style assistant")
        print(f"   ‚Ä¢ Responsive design for all devices")
        
        # Run Flask app
        self.app.run(host=host, port=port, debug=debug)

def run_step7_development():
    """Run Step 7: Advanced Web Interface Development"""
    print("üéØ STEP 7: ADVANCED WEB INTERFACE WITH VISUAL FEATURES")
    print("=" * 80)
    print("Goal: Create modern, responsive web interface for all AI fashion capabilities")
    print("Input: All previous AI systems + web framework")
    print("Output: Complete web application with advanced UI/UX")
    print("=" * 80)
    
    # Initialize web interface
    web_interface = AdvancedFashionWebInterface()
    
    print(f"\nüéâ STEP 7 COMPLETE!")
    print("=" * 40)
    print("‚úÖ Advanced web interface created")
    print("‚úÖ Image upload and classification")
    print("‚úÖ Digital wardrobe management")
    print("‚úÖ AI outfit recommendations")
    print("‚úÖ Interactive analytics dashboard")
    print("‚úÖ AI style assistant chatbot")
    print("‚úÖ Responsive design")
    print("‚úÖ Visual confidence indicators")
    print("‚úÖ Real-time data visualization")
    
    print(f"\nüåê WEB FEATURES:")
    print("   1. Image Classification with Confidence Bars")
    print("   2. Digital Wardrobe Gallery")
    print("   3. AI Outfit Recommendations")
    print("   4. Interactive Analytics Charts")
    print("   5. Style Assistant Q&A")
    print("   6. Real-time Model Health Monitoring")
    
    print(f"\nüíª TECHNOLOGIES USED:")
    print("   ‚Ä¢ Flask web framework")
    print("   ‚Ä¢ Bootstrap 5 for responsive design")
    print("   ‚Ä¢ Chart.js for data visualization")
    print("   ‚Ä¢ Font Awesome icons")
    print("   ‚Ä¢ Modern CSS animations")
    print("   ‚Ä¢ JavaScript for interactivity")
    
    print(f"\nüì± READY TO LAUNCH:")
    print("   Run the web application to experience all features!")
    
    # Ask if user wants to run the web interface
    try:
        run_choice = input("\nüöÄ Would you like to start the web interface now? (y/n): ").lower().strip()
        if run_choice == 'y':
            web_interface.run_web_interface()
        else:
            print("‚úÖ Web interface ready! Run it anytime with:")
            print("   python step7_advanced_web_interface.py")
    except:
        print("‚úÖ Web interface ready!")
    
    return True

if __name__ == "__main__":
    success = run_step7_development()
    
    if success:
        print("\nüéâ Step 7 completed successfully!")
        print("Advanced web interface with visual features is ready!")
        print("üöÄ Your complete Fashion AI system is now fully operational!")
    else:
        print("\n‚ùå Step 7 failed - check configuration and try again")
